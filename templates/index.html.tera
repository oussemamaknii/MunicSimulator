<!DOCTYPE html >
<html lang="en">
<title>Munic Simulator</title>

<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
  <link href="https://cdn.materialdesignicons.com/5.4.55/css/materialdesignicons.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700" rel="stylesheet">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.4.1/css/all.css"
    integrity="sha384-5sAR7xN1Nv6T6+dT2mhtzEpVJvfS3NScPQTrOxhwjIuvcA67KV2R5Jz6kr4abQsz" crossorigin="anonymous">
  <style>
    #doc_text {
      position:absolute;
      right: 70%;
      top: 12%;
    }

    #munic_img {
      position:absolute;
      right: 85%;
      top: -10%;
    }

    .contentupload{
    width: fit-content;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 2%;    
    }

    .lbl{
      width: fit-content;
      margin-left: auto;
      margin-right: auto;
    }

    .contentupload p{
      width: 100%;
      margin-left: auto;
      margin-right: auto;
      
      }

    .radio-toolbar input[type="radio"] {
      display: none;
    }
    
    .radio-toolbar label {
      display: inline-block;
      background-color: #105b68;
      padding: 4px 11px;
      font-family: Arial;
      font-size: 18px;
      cursor: pointer;
    }
    
    .radio-toolbar input[type="radio"]:checked+label {
      color: #c2c2c2;
    }
    .radio-toolbar{
      display: flex;      
      justify-content: space-between;
    }
    .styled-table {
      border-collapse: collapse;
      margin-bottom: 3%;
      margin-top: 3%;
      font-size: 0.9em;
      width:fit-content;
      margin-left: auto;
      margin-right: auto;
      font-family: sans-serif;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
  }
  .styled-table thead tr {
    background-color: rgb(9, 68, 162);
    color: #ffffff;
    text-align: left;
}
.styled-table th,
.styled-table td {
    padding: 12px 15px;
}
.styled-table tbody tr {
  border-bottom: 1px solid #dddddd;
}
.styled-table tbody tr.active-row {
  font-weight: bold;
  color: #4286f4;
}

.styled-table tbody tr:nth-of-type(even) {
  background-color: #f3f3f3;
}

.styled-table tbody tr:last-of-type {
  border-bottom: 2px solid #4286f4;
}

    .label-file {
      cursor: pointer;
      color: #00b1ca;
      font-weight: bold;
      margin-right: 14%;
      margin-left: 14%;
    }

    .label-file:hover {
      color: #25a5c4;
    }

    .input-file {
      display: none;
    }

    .alert {
      border-radius: 12px;
      width: 800px;
      max-width: 90%;
      padding: 16px 22px 17px 20px;
      display: flex;
      align-items: center;
      margin-left: auto;
      margin-right: auto;
      margin-bottom: 10px;
      margin-top: 10px;
    }

    .alert-warning {
      background: #f2a500c8;
      color: rgb(251, 215, 112);
      border-color: rgb(123, 92, 0);
    }

    .alert-info {
      color: #0c5460;
      background-color: #105b68;
      border-color: #042e35;
  }
    .alert .icon__wrapper {
      height: 34px;
      width: 34px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.253);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .alert .icon__wrapper span {
      font-size: 21px;
      color: #fff;
    }

    .alert p {
      color: #fff;
      font-family: Verdana;
      margin-left: 10px;
    }
    .alert p a,
    .alert p a:visited,
    .alert p a:active {
      color: #51c5ff;
    }

    #addcustom{
      position: relative;
      left: 645px;
      margin-top:2%; 
      padding:10px 15px"
    }

    #field button{
      margin-left: 90%;
      margin-top: 2%;
    }

    #nums input {
      height: 40px;
      margin-left: 6px;
      margin-right: 2px;
      width: 80px;
    }
    #array input {
      height: 40px;
      margin-left: 6px;
      margin-right: 2px;
      width: 150px;
    }
    
    #array {
      display: flex;
    }

    #array label {
      height: 40px;
      margin-left: 6px;
      width: 150px;
    }

    #http-div select {
      height: 40px;
      border-radius: 4px;
      width: 130px;
    }
    #http-div label {
      margin-top: 1%;
    }
    #field{
      width: 800px;
    }
    
    .content {
      display: flex;
      width: 800px;
      justify-content: space-between;
      margin-top: 1%;
      margin-bottom: 1%;
      margin-right: 6%;
      padding: 1px 0;
    }

    select {
      background-color: rgb(53, 53, 53);
      border: none;
      width: 200px;
      height: 40px;
      font-family: inherit;
      font-size: inherit;
      cursor: inherit;
      line-height: inherit;
    }

    #http {
      display: inline-block;
    }

    .logged-in {
      display: inline-block;
      margin-right: 10px;
      color: green;
    }

    .logged-out {
      display: inline-block;
      margin-right: 10px;
      color: red;
    }

    .waiting {
      display: inline-block;
      margin-right: 10px;
      color: yellow;
    }

    html{
      background-color: #0b2938 !important;    
      color-scheme: dark !important;
    }
    
    body {
      color: rgba(255, 255, 255, 0.837);
      background-color: rgb(11, 41, 56);
      justify-content: center;
      font-family: Roboto, Arial, sans-serif;
      font-size: 15px;
    }

    .sim_form {
      border: 5px solid #777777;
    }

    #sl {
      border: 5px solid #777777;
      margin-bottom: 2%;
    }

    .slct {
      width: 100%;
      padding: 16px 8px;
      margin: 8px 0;
      display: inline-block;
      border: 1px solid #ccc;
      box-sizing: border-box;
    }

    input[type=text],
    input[type=password] {
      width: 100%;
      width: 800px;
      padding: 16px 8px;
      margin: 8px 0;
      display: inline-block;
      border: 1px solid #cccccc00;
      box-sizing: border-box;
    }

    .icon {
      font-size: 110px;
      display: flex;
      justify-content: center;
      color: #4286f4;
    }

    .button {
      background-color: rgb(9, 68, 162);
      color: white;
      padding: 14px 0;
      margin: 10px 0;
      border: none;
      cursor: grab;
      width: 48%;
    }

    #btn {
      background-color: rgb(9, 68, 162);
      color: white;
      padding: 10px 10px;
      border: none;
      cursor: grab;
    }

    h1 {
      text-align: center;
      font-size: 18;
    }

    button:hover {
      opacity: 0.8;
    }
    
    .formcontainer {
      text-align: center;
      margin: 24px 60px 16px;
    }

    .container {
      padding: 16px 0;
      text-align: left;
    }

    span.psw {
      float: right;
      padding-top: 0;
      padding-right: 15px;
    }

    .boody{
      display: flex;
    }

    #navbar {
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -ms-flex-wrap: wrap;
      flex-wrap: wrap;
      -webkit-box-align: center;
      -ms-flex-align: center;
      align-items: center;
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
      padding: 0.5rem 1rem;
      background-color: #105b68;
    }
  </style>
</head>

<body>
  <nav id="navbar">
      <img src="/public/munic.png" class="d-inline-block align-top" alt="Munic.io">
      
      <div class="radio-toolbar">
        <input type="radio" id="radio1" name="radios" value="all" checked>
        <label for="radio1">Simulate</label>
      
        <input type="radio" id="radio2" name="radios" value="false">
        <label for="radio2">Replay</label>

        <input type="radio" id="radio3" name="radios" value="false">
        <label for="radio3">Uplaod File</label>
      </div>
  </nav>
    
  <div class="boody">
  <div style="margin-left:auto;margin-right:auto;">

    <div class="alert alert-info">
      <div class="icon__wrapper">
        <span class="mdi mdi-alert-outline"></span>
      </div>
      <p >In this <a target="_blank" href="https://store.munic.io/documentations/tracks#toc_1">Documentation</a> you will find how webhooks work, bascically it's what we're simulating here ! Enjoy !</p>
    </div>

  <table class="styled-table" id="thread-table">
    <thead>
        <tr>
            <th>Thread URL</th>
            <th>Abort</th>
            <th>HTTP Request Status</th>
        </tr>
    </thead>
    <tbody >
    </tbody>
  </table>

  <form id="form2" enctype='multipart/form-data' method="post" action="/upload">
    <div class="lbl">
      <label>
        <strong> 
          Upload a Refrence File (if you haven't already)
        </strong>
      </label>
      </div>
      <div class="container">
        <div class="contentupload">
          <input type="file" id="json_file" name="json_file" accept="application/json">
        </div>
        <button type="submit" class="button" id="upload_button" style="margin-left: 26%;"><strong>Upload !!</strong></button>
      </div>
  </form>

  <form id="form1" class="sim_form" enctype='multipart/form-data' method="post" action="/simulate">
    <div class="formcontainer">
      <div class="container">

        <label><strong>Your URL :</strong></label><br>
        <input name="url" id="url" type="text" placeholder="Enter your Notification URL">
        <p>{{ msg }}</p>
        <div class="sim_elements">
        <h1>Coordinates</h1>
        <div class="alert alert-warning">
          <div class="icon__wrapper">
            <span class="mdi mdi-alert-outline"></span>
          </div>
          <p>You are replaying the exact same trip picked by date and file !! if you want to simulate using real
            Coordinates in real time and customized fields, please enter a valid
            google maps api key !
            <a href="https://developers.google.com/maps/documentation/javascript/get-api-key?hl=fr"  target="_blank"><strong>How to create
              one
              !</strong> </a>
          </p>
        </div>
        <label><strong>Google maps API KEY</strong></label><br>
        <input name="key" id="key" type="password" placeholder="Enter your GM API KEY"><br>
        <label><strong>Departure</strong></label><br>
        <input name="lat" id="lat" type="text" placeholder="Enter Source Location"><br>
        <label><strong>Destination</strong></label><br>
        <input name="lon" id="lon" type="text" placeholder="Enter Destination Location">
      </div>
      <div class="replayslct">
        <div id="http-div" class="content">
          <label><strong>Choose a track file </strong></label>
          <div class="select">
            <select name="track_file" id="tf_select">
              <option id="slct" value="">Choose a file</option>
              {% for file, data in track_dates | group_by(attribute="_id.file") %}
              {% if file %}
              <option id="slct" value="{{file}}"> {{file}}</option>
              {% endif %}
              {% endfor %}
            </select>
          </div>
        </div>

        <div id="http-div" class="content">
          <label><strong>Choose a track date </strong></label>
          <div class="select">
            <select name="track_option" id="t_select">
            </select>
          </div>
        </div>
      </div>
      <button type="button" id="addcustom"  class="btn btn-dark"><strong>Add Custom Field</strong></button>
      <div id="custom-fields">

      </div>
      </div>

      <input type="hidden" id="fields_size" name="fields_size">
      <button type="submit" class="button" id="button"><strong>Simulate !!</strong></button>
  </form>

</div>
</div>
</body>
<script src="https://unpkg.com/validator@latest/validator.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>
<script type="text/javascript">
  var sim_chk = document.getElementById("radio1");
  var rep_chk = document.getElementById("radio2");
  var upl_chk = document.getElementById("radio3");
  
  showForm("form1")

  sim_chk.addEventListener('change', function() {
    if(sim_chk.checked){
      showForm("form1")
      button1.innerText = "Simulate !"
      var divsToHide = document.getElementsByClassName("sim_elements");
      for(var i = 0; i < divsToHide.length; i++){
          divsToHide[i].style.display = "block";
      }
      var replayslct = document.getElementsByClassName("replayslct");
      for(var i = 0; i < replayslct.length; i++){
        replayslct[i].style.display = "none";
      }
  }
  });
  
  rep_chk.addEventListener('change', function() {
    if(rep_chk.checked){
      showForm("form1")
      button1.innerText = "Replay !"
      var divsToHide = document.getElementsByClassName("sim_elements");
      for(var i = 0; i < divsToHide.length; i++){
          divsToHide[i].style.display = "none";
      }
      var replayslct = document.getElementsByClassName("replayslct");
    for(var i = 0; i < replayslct.length; i++){
        replayslct[i].style.display = "block";
    }
    }
  });

  upl_chk.addEventListener('change', function() {
    if(upl_chk.checked){
      showForm("form2")
    }
  });

  function showForm(formId) {
    // Hide all forms
    var forms = document.getElementsByTagName("form");
    for (var i = 0; i < forms.length; i++) {
      forms[i].style.display = "none";
    }
  
    // Show the selected form
    var selectedForm = document.getElementById(formId);
    selectedForm.style.display = "block";
  }
  
  var addcustom = document.getElementById("addcustom")

  var index = 0

  addcustom.addEventListener('click',function() {
    var fieldDiv = document.getElementById("custom-fields")
    var div = document.createElement("div")
    div.setAttribute("id","field")
    var label = document.createElement("label")
    label.innerText = "Field Name"
    var input = document.createElement("input")
    input.placeholder = "EnterField Name"
    input.type ="text"
    input.name = "field_name"

    var divselects = document.createElement("div")
    divselects.setAttribute("id","http-div")
    divselects.setAttribute("class","content")

    var labelT = document.createElement("label")
    labelT.innerText = "Select a Type"
    var select = document.createElement("select")
    
    var option0 = document.createElement("option")
    var option1 = document.createElement("option")
    var option2 = document.createElement("option")
    var option3 = document.createElement("option")
    option0.textContent = "Choose a type"
    option0.value = ""
    option1.textContent = "Boolean"
    option1.value = "bool"
    option2.textContent = "Integer"
    option2.value = "int"
    option3.textContent = "String"
    option3.value = "string"
    select.append(option0,option1,option2,option3)

    var li_div = document.createElement("div")

    select.addEventListener("change",function(e){
      switch (e.target.value){
        case "":
          if( divselects.childNodes[3]) {
            if( divselects.childNodes[4]) {
              divselects.childNodes[4].remove()
            }
            divselects.childNodes[3].remove()
            divselects.childNodes[2].remove()
          }
          break;
        case "bool":
          if( divselects.childNodes[3]) {
            if( divselects.childNodes[4]) {
              divselects.childNodes[4].remove()
            }
            divselects.childNodes[3].remove()
            divselects.childNodes[2].remove()
          }
          var labelV = document.createElement("label")
          labelV.innerText = "Select a Value"
          var select2 = document.createElement("select")

          var opt0 = document.createElement("option")
          var opt1 = document.createElement("option")
          var opt2 = document.createElement("option")
          opt0.textContent = "Choose a value"
          opt0.value = ""
          opt1.textContent = "True"
          opt1.value = "true"
          opt2.textContent = "False"
          opt2.value = "false"
          select2.append(opt0,opt1,opt2)
          divselects.append(labelV,select2)
          break;
        case "int":
          if( divselects.childNodes[3]) {
            if( divselects.childNodes[4]) {
              divselects.childNodes[4].remove()
            }
            divselects.childNodes[3].remove()
            divselects.childNodes[2].remove()
          }
          var labelV = document.createElement("label")
          labelV.innerText = "Type Values"
          var divv = document.createElement("div")
          divv.setAttribute("id","nums")
          var input1 = document.createElement("input")
          var input2 = document.createElement("input")
          var input3 = document.createElement("input")
          input1.placeholder = "Min"
          input2.placeholder = "Max"
          input3.placeholder = "Deviation"
          input1.name = "min"
          input2.name = "max"
          input3.name = "deviation"
          divv.append(input1,input2,input3)
          divselects.append(labelV,divv)
          setInputFilter(input1, function(value) {
            return /^-?\d*$/.test(value); }, "Must be an integer");
          setInputFilter(input2, function(value) {
            return /^-?\d*$/.test(value); }, "Must be an integer");
          setInputFilter(input3, function(value) {
            return /^-?\d*$/.test(value); }, "Must be an integer");
          break;
        case "string" :
          if( divselects.childNodes[3]) {
            if( divselects.childNodes[4]) {
              divselects.childNodes[4].remove()
            }
            divselects.childNodes[3].remove()
            divselects.childNodes[2].remove()
          }

          var labelV = document.createElement("label")
          labelV.innerText = "Select a Value"
          var select2 = document.createElement("select")

          var opt0 = document.createElement("option")
          var opt1 = document.createElement("option")
          var opt2 = document.createElement("option")
          opt0.textContent = "Choose a value"
          opt0.value = ""
          opt1.textContent = "Random value / Fixed size"
          opt1.value = "random"
          opt2.textContent = "Predefined Values"
          opt2.value = "array"
          select2.append(opt0,opt1,opt2)

          select2.addEventListener("change",function(e){
            switch(e.target.value){
              case "":
                if( divselects.childNodes[4]) {
                  divselects.childNodes[4].remove()
                }
                break;
              case "random":
                if( divselects.childNodes[4]) {
                  divselects.childNodes[4].remove()
                }
                var labelS = document.createElement("label")
                labelS.innerText = "Select a Size"
                var size = document.createElement("input")
                size.placeholder = "Type a size"
                size.name = "size"
                setInputFilter(size, function(value) {
                  return /^\d*$/.test(value) && (value === "" || parseInt(value) <= 10); }, "Must be between 0 and 10");
                var divv = document.createElement("div")
                divv.setAttribute("id","nums")
                divv.append(labelS,size)
                divselects.append(divv)
                break;
              case "array":
                if( divselects.childNodes[4]) {
                  divselects.childNodes[4].remove()
                }
                var labelS = document.createElement("label")
                labelS.innerText = "Type your Strings (Ctrl+ENTER to add)"
                var string = document.createElement("input")
                string.placeholder = "Type a String"
                var nbe_strings = 0;
                var ul = document.createElement("ul")
                li_div.append(ul)
                string.addEventListener('keyup', function(e) {
                    if (e.key === 'Enter' || e.keyCode === 13) {
                    console.log("hi")
                    // Prevent the default action of submitting the form
                    e.preventDefault();
                    if(string.value != ""){
                      var imput = document.createElement("input")
                      imput.name = "string" + nbe_strings
                      imput.hidden = true
                      imput.value = string.value
                      var li = document.createElement("li")
                      li.innerText = string.value
                      ul.append(li)
                      string.value = ""
                      nbe_strings += 1
                      li_div.append(imput)
                    }
                  }
                })
                var divv = document.createElement("div")
                divv.setAttribute("id","array")
                divv.append(labelS,string)
                divselects.append(divv)
                break;       
            }
          })

          divselects.append(labelV,select2)

          break;
      }
    })

    divselects.append(labelT,select)
    
    var labelP = document.createElement("label")
    labelP.innerText = "Cyclic Time Period in seconds (Simulate every {?})"
    var inputP = document.createElement("input")
    inputP.placeholder = "Enter Time Period (seconds)"
    inputP.type ="text"

    var deleteB = document.createElement("button")
    deleteB.setAttribute("class","btn btn-danger")
    deleteB.addEventListener("click",function(e){
      e.preventDefault();
      div.remove()
    })
    deleteB.innerText = "Delete"

    var br1 = document.createElement("br")
    var br2 = document.createElement("br")

    div.append(label,br1,input,divselects,li_div,labelP,br2,inputP,deleteB)
    fieldDiv.appendChild(div)
    index += 1
    document.getElementById("fields_size").value = index
  })

  function setInputFilter(textbox, inputFilter, errMsg) {
    ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop", "focusout"].forEach(function(event) {
      textbox.addEventListener(event, function(e) {
        if (inputFilter(this.value)) {
          // Accepted value
          if (["keydown","mousedown","focusout"].indexOf(e.type) >= 0){
            this.classList.remove("input-error");
            this.setCustomValidity("");
          }
          this.oldValue = this.value;
          this.oldSelectionStart = this.selectionStart;
          this.oldSelectionEnd = this.selectionEnd;
        } else if (this.hasOwnProperty("oldValue")) {
          this.classList.add("input-error");
          this.setCustomValidity(errMsg);
          this.reportValidity();
          this.value = this.oldValue;
          this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
        } else {
          this.value = "";
        }
      });
    });
  }
  
</script>
  
<script type="text/javascript">
  const url = document.getElementById("url");
  const json_file = document.getElementById("json_file");
  const button1 = document.getElementById("button");
  const upload_button = document.getElementById("upload_button");
  const http = document.getElementById("http");
  const http_div = document.getElementById("http-div");
  const key = document.getElementById("key");
  const lon = document.getElementById("lon");
  const lat = document.getElementById("lat");
  lon.disabled = true;
  lat.disabled = true;
  button1.disabled = true;
  upload_button.disabled = true;
  const evtSource = new EventSource("/events");
  var table = document.getElementById("thread-table");
  table.style.display = "none";
  
  var replayslct = document.getElementsByClassName("replayslct");
  for(var i = 0; i < replayslct.length; i++){
      replayslct[i].style.display = "none";
  }

  var tf_select = document.getElementById("tf_select");
  var t_select = document.getElementById("t_select");

  evtSource.onopen = function () {
    console.log("Connection to server opened.");
  };

  evtSource.onmessage = function (e) {
    const obj = JSON.parse(e.data);

    if(table.rows.length == 1){
      table.style.display = "none";
    }else{
      table.style.display = "block";
    }

    var tbodyRef = document.getElementById('thread-table').getElementsByTagName('tbody')[0];

    tbodyRef.innerHTML = '';

    for (const [key, value] of Object.entries(obj)) {

      var newRow = tbodyRef.insertRow();
      newRow.setAttribute("id","row"+key);

      var newCell = newRow.insertCell();
      newCell.setAttribute("class","column-data");

      var newText = document.createTextNode(key);
      
      newCell.appendChild(newText);
      
      var newCell1 = newRow.insertCell();

      var btn = document.createElement("button");
      btn.setAttribute("class","inp");
      btn.setAttribute("id","btn");
      btn.textContent = "Abort Thread !";
      newCell1.appendChild(btn);
      
      var newCell2 = newRow.insertCell();

      const newSpan = document.createElement("span");
      newSpan.setAttribute('id', 'newSpan');
      newSpan.textContent = "●";
      const newP = document.createElement("p");
      newP.setAttribute('id', 'http');
      const newDiv = document.createElement("div");
      newDiv.setAttribute('id', 'http-div');

      if (value == 1) {
        newSpan.setAttribute('class', 'logged-in');
        newP.textContent = "code : 200";
      }
      else if (value == 0) {
        newSpan.setAttribute('class', 'logged-out');
        newP.textContent = "code : 503";
      }
      else {
        newSpan.setAttribute('class', 'waiting');
        newP.textContent = "code : _";
      }
      
      newDiv.appendChild(newSpan);
      newDiv.appendChild(newP);
      newCell2.appendChild(newDiv);
    }

    let allButtons = document.getElementsByClassName('inp');
    for (let button of allButtons) {
       button.addEventListener('click', () => {
          var clickedElement = event.target
          var clickedRow = clickedElement.parentNode.parentNode.id;
          var rowData = document.getElementById(clickedRow).querySelectorAll('.column-data');
          let url = rowData[0].innerHTML;
          e.preventDefault();
          $.ajax({
            type: "POST",
            url: "/abort",
            data: url,
            success: function(result) {
              console.log("success")
            },
            error: function(result) {
              console.log("error")
            }
          });
       });
    }

  };

  evtSource.onerror = function () {
    console.log("EventSource failed.");
  };


  key.addEventListener("input", (event) => {
    if (key.value == "") {
      lon.disabled = true;
      lat.disabled = true;
    } else {
      lat.disabled = false;
      lon.disabled = false;
    }
  });

  json_file.addEventListener("change", (event) => {
    if (event.target.files[0]) {
      upload_button.disabled = false;
    } else {
      upload_button.disabled = true;
    }
  });

  const tdata = {{ track_dates| json_encode() | safe }};
  const pdata = {{ presence_dates| json_encode() | safe }};

  tf_select.addEventListener("change", (event) => {
    removeOptions(t_select);
    for (var i = 0; i < tdata.length; i++) {
      if (tdata[i]._id.file == event.target.value) {
        var new_option = document.createElement("option");
        new_option.text = `${tdata[i]._id.year}-${tdata[i]._id.month}-${tdata[i]._id.day}`;
        new_option.value = `${tdata[i]._id.year}-${tdata[i]._id.month}-${tdata[i]._id.day}`;
        t_select.appendChild(new_option);
      }
    };
    button1.disabled = ((tf_select.value == "") || (url.value == ""))
  });

  function removeOptions(selectElement) {
    var i, L = selectElement.options.length - 1;
    for (i = L; i >= 0; i--) {
      selectElement.remove(i);
    }
  }
  
  url.addEventListener("input", (event) => {
    button1.disabled = !((tf_select.value != "") && (validator.isURL(event.target.value)))
  });
</script>

</html>